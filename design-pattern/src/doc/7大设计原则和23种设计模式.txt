
设计模式的目的：
1 代码重用性;
2 可读性;
3 可扩展性;
4 可靠性(新增一个功能不会影响到现有已有的功能模块);
5 高内聚低耦合(按功能模块来讲  一个功能模块内很紧凑， 两个功能模块之间减量减少耦合);


7大设计原则：
 1、单一职责原则： 一个类只负责一项职责;
 2、接口隔离原则:
 3、依赖倒转原则: Dependence Inversion Priclple
    高层模块不应该依赖底层模块，二者都应该依赖其抽象； 抽象不应该依赖细节，细节应该依赖抽象； 中心思想就是面向接口编程；

 4、 李氏替换原则 Liskov： 继承时尽量不要复写父类的方法  可以通过 聚合、组合、依赖来替换继承；
 5、 开闭原则(最基础最重要的设计原则)： 模块和函数应该对扩展开放(对提供方)， 对修改关闭(对使用方)。用抽象构建框架，用实现扩展细节；
 6、 迪米特法则 Demeter
     一个对象应该对其他对象保持最少的了解；
     类与类关系与密切 耦合度越大；
     迪米特法则又叫最少知道原则；
     直接朋友：成员变量、方法参数、方法返回的类称为直接朋友；
     非直接朋友：比如局部变量中的类；
 7、 合成复用原则：
     尽量使用合成/聚合的方式,而不是使用继承；



类与类之间的关系一共有6中关系： 依赖、 泛化(继承)、实现、关联、聚合与组合；
    依赖： 一个类中用到了其他类 那关系就是依赖；(类的成员属性、方法返回参数、方法接受参数、方法类的参数);
    泛化(继承): 是依赖关系的一种特例；
    实现：【】接口实现，是依赖关系的一种特例；
    关联：Association【直线】  有单向 双向关系； 一对一单向/双向关系；是依赖关系的一种特例；
    聚合: Aggregation:【空心菱形】 表示整体和部分的关系，整体和部分都可以分开； 聚合关系是关联关系的一种特例；
    组合：Composite【实心心菱形】  成员变量直接=new A()的方式创建出来的，但是必须符合是整体和部分的关系，并且整体和部分不可以分开；
         涉及到级联删除； 组合关系是关联关系的一种特例；


设计模式分为三种类型：
1 创建型模式： 单例模式、工厂模式等等
2 结构型模式： 装饰模式、代理模式等等
3 行为型模式： 观察者模式、 模板方法模式、策略模式、责任链模式等等




















